Работаем в директории helm
Создание namespace
======================================================================================================================
kubectl create namespace eventbus
======================================================================================================================


Установка metallb
======================================================================================================================
Ставим metallb
minikube addons enable metallb
Проверка
kubectl get pods -n metallb-system
Результат
NAME                          READY   STATUS    RESTARTS   AGE
controller-66bc445b99-kls54   1/1     Running   0          6m12s
speaker-plzcg                 1/1     Running   0          6m12s

Конфигурируем плагин metallb
minikube ip
Результат
192.168.49.2

minikube addons configure metallb
-- Enter Load Balancer Start IP: 192.168.49.10
-- Enter Load Balancer End IP: 192.168.49.50
    ▪ Using image metallb/speaker:v0.9.6
    ▪ Using image metallb/controller:v0.9.6
✅  metallb was successfully configured


Результат - HTTP трафик может поступать в кластер minikube через LoadBalancer services

======================================================================================================================

Развертывание ядро Istio (istiod)
======================================================================================================================
curl -L https://istio.io/downloadIstio | sh -
cd istio-1.11.3
export PATH=$PWD/bin:$PATH
istioctl x precheck
istioctl install --set profile=minimal -y --set meshConfig.accessLogFile=/dev/stdout
istioctl operator init --watchedNamespaces=eventbus
cd ..
kubectl label namespace eventbus istio-injection=enabled

======================================================================================================================


======================================================================================================================

Установка кластера rabbitmq
======================================================================================================================
1. Установить cluster operator
kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"
Альтернатива:
helm repo add sagikazarmark https://charts.sagikazarmark.dev
helm install my-rabbitmq-operator sagikazarmark/rabbitmq-operator --version 0.0.3


2. Установить topology operator
2.1 Установка cert-manager
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.yaml
Проверка
kubectl get pods -n cert-manager

NAME                                       READY   STATUS    RESTARTS   AGE
cert-manager-7dd5854bb4-hq5p4              1/1     Running   0          71s
cert-manager-cainjector-64c949654c-8kgtf   1/1     Running   0          71s
cert-manager-webhook-6b57b9b886-b9jcq      1/1     Running   0          71s


2.2 Установка оператора
kubectl apply -f https://github.com/rabbitmq/messaging-topology-operator/releases/latest/download/messaging-topology-operator-with-certmanager.yaml
Установка требует запущенного cert-manager. бывает проходит не с первого раза. необходимо повторно запускать.
Результат - развернуты CRD RabbitMQ

3. Развертывание кластера RabbitMQ
3.1 Создание кластера и очередей
kubectl apply -f rabbitmq/rabbitmqCluster.yaml

Проверка старта кластера
kubectl get pods --namespace eventbus
Результат
NAME                         READY   STATUS    RESTARTS   AGE
rabbitmq-cluster1-server-0   1/1     Running   0          3m10s

kubectl apply -f rabbitmq/rabbitmqQueue.yaml
kubectl apply -f rabbitmq/rabbitmqUsers.yaml

Результат
Создан кластер rabbitmq, пользователи и очереди

Проверка
kubectl port-forward service/rabbitmq-cluster1 15673:15672 --namespace eventbus
затем в браузере http://localhost:15673
Появится страница консоли администрирования rabbitmq. Зайти под admin/admin.
Убедиться, что созданы пользователи admin и http-proxy (при этом будет еще один пользователь с автогенеренным именем)
Убедиться, что созданы очереди rq1 и rq2


======================================================================================================================
Развертывание istio ingress и egress в пространство eventbus

kubectl apply -f ./istio-gateway/istioGateway.yaml --namespace eventbus

Проверка работы
kubectl get svc --namespace eventbus
Результат
NAME                      TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                                      AGE
ingressgateway            LoadBalancer   10.98.3.66      192.168.49.10   15021:31122/TCP,80:32225/TCP,443:32633/TCP   15s
rabbitmq-cluster1         ClusterIP      10.101.188.55   <none>          5672/TCP,15672/TCP,15692/TCP                 4m52s
rabbitmq-cluster1-nodes   ClusterIP      None            <none>          4369/TCP,25672/TCP                           4m52s

В браузере зайти на external api ingressgateway - http://192.168.49.10
Откроется страница консоли администратора RabbitMQ

======================================================================================================================

Развертывание rabbitmq http proxy
helm install rabbit-http-proxy rabbit-http-proxy --namespace eventbus
kubectl apply -f rabbit-http-service/rabbit-http-service.yaml -n eventbus

Проверка
Узнаем IP адрес для обращения к rabbit-http-proxy
kubectl get svc rabbit-http-svc -n eventbus
Результат
NAME              TYPE           CLUSTER-IP    EXTERNAL-IP     PORT(S)        AGE
rabbit-http-svc   LoadBalancer   10.99.114.4   192.168.49.11   80:32354/TCP   31m

curl -X POST -d '{"test": 1}' -H "Content-Type: application/json" -vvvv http://192.168.49.11/rq1
curl -vvvv http://192.168.49.11/rq1

#helm uninstall rabbit-http-proxy --namespace eventbus
TODO Health check реагирует только на http код 200 без анализа реального подключения к RabbitMQ